#include<bits/stdc++.h>
using namespace std;
template<typename T>
class BinaryTreeNode
{
    public:
    T data;
    BinaryTreeNode<T>*left;
    BinaryTreeNode<T>*right;
    BinaryTreeNode(T data)
    {
        this->data=data;
        left=NULL;
        right=NULL;
    }
    ~BinaryTreeNode()
    {
        delete left;
        delete right;
    }
};
// PairAns class -
 class PairAns {
    public :
        int min;
        int max;
 };
 //tO FIND THE MIN AND MAX VALUE IN A TREE
 PairAns minMax(BinaryTreeNode<int> *root) {
    /* Don't write main().
     * Don't read input, it is passed as function argument.
     * Return output and don't print it.
     * Taking input and printing output is handled automatically.
     */
    if(root==NULL)
    {
        PairAns a;
        a.min=INT_MAX;
        a.max=INT_MIN;
        return a;
    }
    PairAns possible=minMax(root->left);
    PairAns possible2=minMax(root->right);
    int maxi=max(possible.max,possible2.max);
    int mini=min(possible.min,possible2.min);
    PairAns answer;
    if(root->data>maxi)
    {
        answer.max=root->data;
	}
    else
    {
        answer.max=maxi;
	}
    if(root->data<mini)
    {
        answer.min=root->data;
	}
    else
    {
        answer.min=mini;
	}
    return answer;
}
//2 methods
int height(BinaryTreeNode<int>*root)
{
    if(root==NULL)
    {
        return 0;
    }
    return 1+max(height(root->left),height(root->right));
}
int Diameter(BinaryTreeNode<int>* root)
{
    if(root==NULL)
    {
        return 0;
    }
    int option1=height(root->left)+height(root->right);
    int option2=Diameter(root->left);
    int option3=Diameter(root->right);
    return max(option1,max(option2,option3));
}
//2nd method a BEtter one
pair<int,int>Diameter2(BinaryTreeNode<int>* root)
{
    if(root==NULL)
    {
        auto a=make_pair(0,0);
        return a;
    }
    //First is height second is diameter.
    pair<int,int>option1=Diameter2(root->left);
    pair<int,int>option2=Diameter2(root->right);
    int lh=option1.first;
    int ld=option1.second;
    int rh=option2.first;
    int rd=option2.second;
    int height=1+max(lh,rh);
    int diameter=max(lh+rh,max(ld,rd)bbbb );
    auto answer=make_pair(height,diameter);
    return answer;
}
bool isBalanced(BinaryTreeNode<int>*root)
{
  if(root==NULL)
    {
        return true;
    }
    int lh=height(root->left);
    int rh=height(root->right);
    bool a1=isBalanced(root->left);
    bool a2=isBalanced(root->right);
    if(abs(lh-rh)<=1&&a1&&a2)
    {
        return true;
    }
    else
    {
        return false;
    }
}
pair<int,bool>isBalanced2(BinaryTreeNode<int>*root)
{
     if(root==NULL)
    {
        auto a=make_pair(0,true);
        return a;
    }
    auto opt1=isBalanced2(root->left);
    auto opt2=isBalanced2(root->right);
    //Also have to check abs(opt1.first-opt2.first)<=1 for the root and the left and right subtrees answer to return
    auto answer=make_pair(1+max(opt1.first,opt2.first),abs(opt1.first-opt2.first)<=1&&opt1.second&&opt2.second);
    return answer;
}
BinaryTreeNode<int>*LevelWiseInput()
{
    cout<<"Enter root data"<<endl;
    int rootData;
    cin>>rootData;
    if(rootData==-1)
    {
        return NULL;
    }
    //As have to return root
    BinaryTreeNode<int>*root=new BinaryTreeNode<int>(rootData);
    queue<BinaryTreeNode<int>*>pendingNodes;
    pendingNodes.push(root);
    while(!pendingNodes.empty())
    {
        BinaryTreeNode<int>*front=pendingNodes.front();
        pendingNodes.pop();
        cout<<"Enter data for left of "<<front->data<<endl;
        int a;
        cin>>a;
        if(a!=-1)
        {
            BinaryTreeNode<int>*left=new BinaryTreeNode<int>(a);
            front->left=left;
            pendingNodes.push(left);
        }
        cout<<"Enter data for right of "<<front->data<<endl;
        int b;
        cin>>b;
        if(b!=-1)
        {
            BinaryTreeNode<int>*right=new BinaryTreeNode<int>(b);
            front->right=right;
            pendingNodes.push(right);
        }
    }
    return root;
}
void printLevel(BinaryTreeNode<int>*root)
{
       if(root==NULL)
    {
        return;
    }
    queue<BinaryTreeNode<int>*>pendingNodes;
    pendingNodes.push(root);
    while(!pendingNodes.empty())
    {
        BinaryTreeNode<int>*front=pendingNodes.front();
        pendingNodes.pop();
        cout<<front->data<<":";
        if(front->left!=NULL)
        {
            cout<<"L:"<<front->left->data<<",";
            pendingNodes.push(front->left);
        }
        else
        {
            cout<<"L:"<<"-1"<<",";
        }
        if(front->right!=NULL)
        {
            cout<<"R:"<<front->right->data;
            pendingNodes.push(front->right);
        }
         else
        {
            cout<<"R:"<<"-1"<<",";
        }
        cout<<endl;
    }
    return;
}
//Let say if do not have to use pair for returning can make our own class
/*class BalancedReturnType
{
    int height;
    bool Balanced;
};
BalancedReturnType*cHeckBAlanced(BinaryTreeNode<int>root)
{
//I'll just write the base case
    if(root==NULL)
    {
        BalancedReturnType*a=new BalancedReturnType();
        a->height=0;
        a->Balanced=false;
        return a;
    }
}
*/
int main()
{
   BinaryTreeNode<int>*root=LevelWiseInput();
   pair<int,int>a=Diameter2(root);
   cout<<"height is equal to "<<a.first<<endl;
   cout<<"Diameter is equal to "<<a.second<<endl;
   //printLevel(root);
   delete root;
}

