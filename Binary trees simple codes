#include<bits/stdc++.h>
using namespace std;
template<typename T>
class BinaryTreeNode
{
    public:
    T data;
    BinaryTreeNode<T>*left;
    BinaryTreeNode<T>*right;
    BinaryTreeNode(T data)
    {
        this->data=data;
        left=NULL;
        right=NULL;
    }
    ~BinaryTreeNode()
    {
        delete left;
        delete right;
    }
};
//2 methods
bool isNodePresent(BinaryTreeNode<int>* root, int x) {
 
  if(root==NULL)
  {
      return false;
  }
  if(root->data==x)
  {
      return true;
  }
  bool a=isNodePresent(root->left,x);
  bool b=isNodePresent(root->right,x);
  if(a||b)
  {
      return true;
  }
  else
  {
      return false;
  }
}
//2ND methode
bool isNodePresent2(BinaryTreeNode<int>* root, int x) {
 
  if(root==NULL)
  {
      return false;
  }
  if(root->data==x)
  {
      return true;
  }
  return isNodePresent2(root->left,x)||isNodePresent2(root->right,x);
}
//2 methods
int height(BinaryTreeNode<int> *root) {
   if(root==NULL)
   {
       return 0;
   }
   return 1+max(height(root->left),height(root->right));
}
//2nd method
int height2(BinaryTreeNode<int> *root) 
{
    if(root==NULL)
   {
       return 0;
   }
   int a=height2(root->left);
    int b=height2(root->right);
    return 1+max(a,b);
}
BinaryTreeNode<int>*TakeInput()
{
    cout<<"Enter data"<<endl;
    int data;
    cin>>data;
    if(data==-1)
    {
        return NULL;
    }
    BinaryTreeNode<int>*root=new BinaryTreeNode<int>(data);
    root->left=TakeInput();
    root->right=TakeInput();
    //If given -1 iska matlab kuch nahi hai
    return root;
}
BinaryTreeNode<int>*LevelWiseInput()
{
    cout<<"Enter root data"<<endl;
    int rootData;
    cin>>rootData;
    if(rootData==-1)
    {
        return NULL;
    }
    //As have to return root
    BinaryTreeNode<int>*root=new BinaryTreeNode<int>(rootData);
    queue<BinaryTreeNode<int>*>pendingNodes;
    pendingNodes.push(root);
    while(!pendingNodes.empty())
    {
        BinaryTreeNode<int>*front=pendingNodes.front();
        pendingNodes.pop();
        cout<<"Enter data for left of "<<front->data<<endl;
        int a;
        cin>>a;
        if(a!=-1)
        {
            BinaryTreeNode<int>*left=new BinaryTreeNode<int>(a);
            front->left=left;
            pendingNodes.push(left);
        }
        cout<<"Enter data for right of "<<front->data<<endl;
        int b;
        cin>>b;
        if(b!=-1)
        {
            BinaryTreeNode<int>*right=new BinaryTreeNode<int>(b);
            front->right=right;
            pendingNodes.push(right);
        }
    }
    return root;
}
void mirrorBinaryTree(BinaryTreeNode<int>* root) 
{
    // Right child of every nodes should become left and left should become right.
 if(root==NULL)
    {
        return;
    }
    BinaryTreeNode<int>*temp=root->left;
    root->left=root->right;
    root->right=temp;
    mirrorBinaryTree(root->left);
    mirrorBinaryTree(root->right);
    return;
}
void preOrder(BinaryTreeNode<int> *root) 
{
    if(root==NULL)
    {
        return;
    }
    cout<<root->data<<" ";
    preOrder(root->left);
    preOrder(root->right);
}
void postOrder(BinaryTreeNode<int> *root) 
{
    if(root==NULL)
    {
        return;
    }
    postOrder(root->left);
    postOrder(root->right);
    cout<<root->data<<" ";
}
int sumOfAllNodes(BinaryTreeNode<int>* root) {
    // Write your code here
    if(root==NULL)
    {
        return 0;
    }
    return root->data+sumOfAllNodes(root->left)+sumOfAllNodes(root->right);
}
void printLevel(BinaryTreeNode<int>*root)
{
       if(root==NULL)
    {
        return;
    }
    queue<BinaryTreeNode<int>*>pendingNodes;
    pendingNodes.push(root);
    while(!pendingNodes.empty())
    {
        BinaryTreeNode<int>*front=pendingNodes.front();
        pendingNodes.pop();
        cout<<front->data<<":";
        if(front->left!=NULL)
        {
            cout<<"L:"<<front->left->data<<",";
            pendingNodes.push(front->left);
        }
        else
        {
            cout<<"L:"<<"-1"<<",";
        }
        if(front->right!=NULL)
        {
            cout<<"R:"<<front->right->data;
            pendingNodes.push(front->right);
        }
         else
        {
            cout<<"R:"<<"-1"<<",";
        }
        cout<<endl;
    }
    return;
}
void printTree(BinaryTreeNode<int>*root)
{
    if(root==NULL)
    {
        return;
    }
    cout<<root->data<<":";
    if(root->left)
    {
        cout<<"L";
       cout<<root->left->data;
    }
     if(root->right)
    {
        cout<<"R";
       cout<<root->right->data;
    }
    cout<<endl;
    printTree(root->left);
    printTree(root->right);
    return;
}

int main()
{
   /*BinaryTreeNode<int>*root=new BinaryTreeNode<int>(1);
   BinaryTreeNode<int>*left=new BinaryTreeNode<int>(2);
   BinaryTreeNode<int>*right=new BinaryTreeNode<int>(3);
   root->left=left;
   root->right=right;
   */
   BinaryTreeNode<int>*root=LevelWiseInput();
   printLevel(root);
   delete root;
}

